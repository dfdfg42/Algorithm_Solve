#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<vector<char>> board; // 전광판의 상태를 저장
vector<vector<vector<int>>> numberSet = {
    {   // 0
        {0, 0, 0, 0, 0, 0},
        {0, 0, 1, 1, 0, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 0, 1, 1, 0, 0},
        {0, 0, 0, 0, 0, 0}
    },
    {   // 1
        {0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 1, 1, 0, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 0}
    },
    {   // 2
        {0, 0, 0, 0, 0, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 0, 0, 0, 1, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 1, 0, 0, 0, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 0, 0, 0, 0, 0}
    },
    {   // 3
        {0, 0, 0, 0, 0, 0},
        {0, 1, 1, 1, 0, 0},
        {0, 0, 0, 0, 1, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 1, 0},
        {0, 1, 1, 1, 0, 0},
        {0, 0, 0, 0, 0, 0}
    },
    {   // 4
        {0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 1, 1, 0, 0},
        {0, 1, 0, 1, 0, 0},
        {1, 1, 1, 1, 1, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 0}
    },
    {   // 5
        {0, 0, 0, 0, 0, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 1, 0, 0, 0, 0},
        {0, 1, 1, 1, 0, 0},
        {0, 0, 0, 0, 1, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 0, 1, 1, 0, 0}
    },
    {   // 6
        {0, 0, 0, 0, 0, 0},
        {0, 1, 0, 0, 0, 0},
        {0, 1, 0, 0, 0, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 0, 0, 0, 0, 0}
    },
    {   // 7
        {0, 0, 0, 0, 0, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 0, 0, 0, 1, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 0}
    },
    {   // 8
        {0, 0, 0, 0, 0, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 0, 0, 0, 0, 0}
    },
    {   // 9
        {0, 1, 1, 1, 1, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 1, 1, 1, 1, 0},
        {0, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 1, 0}
    }
};

int main() {
    board.resize(7);
    int len = 0;

    // 전광판의 상태 입력받기
    for (int i = 0; i < 7; i++) {
        string s;
        cin >> s;
        len = s.length();
        for (auto c : s) {
            board[i].push_back(c - '0'); // 숫자로 변환하여 저장
        }
    }


    int N = len / 6; // 전광판에 표시된 숫자의 개수

    vector<int> numbers;
    //한칸한칸 탐색
    for (int i = 0; i < N; i++) {
        vector<vector<int>> num(7, vector<int>(6));

        // 숫자를 7x6의 부분 행렬로 추출
        for (int a = 0; a < 7; a++) {
            for (int b = 0; b < 6; b++) {
                num[a][b] = board[a][b + 6 * i];
            }
        }

        // 추출된 숫자를 numberSet과 비교하여 매칭되는 숫자를 찾기
        for (int p = 0; p <= 9; p++) {
            if (numberSet[p] == num) {
                numbers.push_back(p); // 숫자를 추가
                break;
            }
        }
    }

    // 사전순으로 다음 순열 구하기
    if (next_permutation(numbers.begin(), numbers.end())) {
        // 다음 순열을 전광판에 가로로 다시 출력
        for (int a = 0; a < 7; a++) {  // 7행에 대해서 반복
            for (int i = 0; i < N; i++) {  // 각 숫자에 대해
                int num = numbers[i];
                for (int b = 0; b < 6; b++) {  // 숫자의 각 열 출력
                    cout << numberSet[num][a][b];
                }
            }
            cout << '\n';  // 각 행이 끝날 때 줄바꿈
        }
    }
    else {
        cout << "The End" << endl;
    }

    return 0;
}
